import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2, Wand2, ArrowRight } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface Student {
  id: string;
  name: string;
  goal: string;
}

interface WorkoutSuggestionDialogProps {
  student: Student;
  onClose: () => void;
}

const WorkoutSuggestionDialog = ({ student, onClose }: WorkoutSuggestionDialogProps) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);

  // Fallback exercises b√°sicos se o DB estiver vazio
  const fallbackExercises = [
    {
      id: "fallback-1",
      name: "Agachamento Livre",
      category: "For√ßa",
      muscle_groups: ["Quadr√≠ceps", "Gl√∫teos", "Posterior"],
      difficulty: "Iniciante",
      equipment: ["Barra", "Anilhas"],
      instructions: [
        "Fique em p√© com os p√©s na largura dos ombros",
        "Des√ßa flexionando joelhos e quadris como se sentasse",
        "Mantenha o peito erguido e joelhos alinhados",
        "Volte √† posi√ß√£o inicial empurrando com os calcanhares"
      ],
      tips: ["Mantenha as costas retas", "N√£o deixe os joelhos passarem das pontas dos p√©s"],
      duration: 0,
      reps: 12,
      sets: 3,
      rest_time: 90,
      video_url: "",
      image_url: ""
    },
    {
      id: "fallback-2",
      name: "Supino com Barra",
      category: "For√ßa",
      muscle_groups: ["Peitoral", "Tr√≠ceps", "Ombros"],
      difficulty: "Iniciante",
      equipment: ["Banco", "Barra", "Anilhas"],
      instructions: [
        "Deite no banco com os p√©s apoiados no ch√£o",
        "Segure a barra na largura dos ombros",
        "Des√ßa a barra controladamente at√© o peito",
        "Empurre explosivamente de volta √† posi√ß√£o inicial"
      ],
      tips: ["Mantenha os ombros afastados das orelhas", "Controle a descida para evitar les√µes"],
      duration: 0,
      reps: 10,
      sets: 3,
      rest_time: 120,
      video_url: "",
      image_url: ""
    },
    {
      id: "fallback-3",
      name: "Remada Curvada",
      category: "For√ßa",
      muscle_groups: ["Costas", "B√≠ceps", "Ombros"],
      difficulty: "Iniciante",
      equipment: ["Barra", "Anilhas"],
      instructions: [
        "Fique em p√© com os p√©s na largura dos quadris",
        "Incline o tronco mantendo as costas retas",
        "Puxe a barra em dire√ß√£o ao abd√¥men",
        "Contraia as esc√°pulas no topo do movimento"
      ],
      tips: ["Mantenha o core contra√≠do", "Evite usar impulso das pernas"],
      duration: 0,
      reps: 12,
      sets: 3,
      rest_time: 90,
      video_url: "",
      image_url: ""
    },
    {
      id: "fallback-4",
      name: "Prancha",
      category: "Funcional",
      muscle_groups: ["Core", "Ombros", "Gl√∫teos"],
      difficulty: "Iniciante",
      equipment: [],
      instructions: [
        "Apoie-se nos antebra√ßos e ponta dos p√©s",
        "Mantenha o corpo em linha reta",
        "Contraia o abd√¥men e gl√∫teos",
        "Segure a posi√ß√£o respirando normalmente"
      ],
      tips: ["N√£o deixe os quadris ca√≠rem", "Olhe para o ch√£o para manter a coluna neutra"],
      duration: 30,
      reps: 0,
      sets: 3,
      rest_time: 60,
      video_url: "",
      image_url: ""
    },
    {
      id: "fallback-5",
      name: "Flex√£o de Bra√ßo",
      category: "For√ßa",
      muscle_groups: ["Peitoral", "Tr√≠ceps", "Ombros"],
      difficulty: "Iniciante",
      equipment: [],
      instructions: [
        "Apoie as m√£os no ch√£o na largura dos ombros",
        "Des√ßa o peito em dire√ß√£o ao ch√£o",
        "Mantenha o corpo reto como uma prancha",
        "Empurre de volta √† posi√ß√£o inicial"
      ],
      tips: ["Se dif√≠cil, fa√ßa com joelhos no ch√£o", "Controle a descida para 2-3 segundos"],
      duration: 0,
      reps: 10,
      sets: 3,
      rest_time: 60,
      video_url: "",
      image_url: ""
    },
    {
      id: "fallback-6",
      name: "Eleva√ß√£o de Panturrilha",
      category: "For√ßa",
      muscle_groups: ["Panturrilhas"],
      difficulty: "Iniciante",
      equipment: [],
      instructions: [
        "Fique em p√© com os p√©s paralelos",
        "Eleve os calcanhares o mais alto poss√≠vel",
        "Contraia as panturrilhas no topo",
        "Des√ßa controladamente"
      ],
      tips: ["Fa√ßa devagar para maior ativa√ß√£o", "Use uma parede para equil√≠brio se necess√°rio"],
      duration: 0,
      reps: 15,
      sets: 3,
      rest_time: 45,
      video_url: "",
      image_url: ""
    }
  ];

  const generateWorkout = async () => {
    setIsGenerating(true);
    try {
      // 1. Fetch Anamnesis data
      const { data: anamnesis } = await supabase
        .from('anamnesis')
        .select('training_experience')
        .eq('student_id', student.id)
        .single();

      const experience = anamnesis?.training_experience || 'iniciante';
      
      // 2. Define workout parameters based on goal and experience
      let category = 'For√ßa';
      let difficulty = 'Iniciante';
      let repRange = '8-12';
      let sets = 3;

      if (experience === 'intermediario') {
        difficulty = 'Intermedi√°rio';
        sets = 4;
      } else if (experience === 'avancado') {
        difficulty = 'Avan√ßado';
        sets = 4;
      }

      if (student.goal === 'perder_gordura') {
        repRange = '12-15';
        category = 'Funcional'; // Mix of strength and cardio
      }

      // 3. Fetch exercises based on parameters - TENTATIVA 1: Espec√≠fica
      let exercises = await supabase
        .from('exercises')
        .select('*')
        .eq('category', category)
        .eq('difficulty', difficulty)
        .limit(6)
        .then(({ data, error }) => {
          if (error) console.warn('Erro na query espec√≠fica:', error);
          return data || [];
        });

      // Se n√£o encontrou, TENTATIVA 2: Mais ampla (sem filtros, pega os primeiros 6)
      if (exercises.length === 0) {
        exercises = await supabase
          .from('exercises')
          .select('*')
          .limit(6)
          .then(({ data, error }) => {
            if (error) console.warn('Erro na query ampla:', error);
            return data || [];
          });
      }

      // Se ainda n√£o encontrou, usa FALLBACK (exerc√≠cios b√°sicos pr√©-definidos)
      if (exercises.length === 0) {
        console.warn('Nenhum exerc√≠cio encontrado no DB - usando fallback');
        exercises = fallbackExercises.slice(0, 6); // Pega os primeiros 6 do fallback
        toast({
          title: "Usando exerc√≠cios b√°sicos",
          description: "Adicione mais exerc√≠cios na biblioteca para sugest√µes personalizadas! üìö",
        });
      }

      // 4. Build the suggested workout object
      const suggestedWorkout = {
        name: `Sugest√£o para ${student.name} - ${student.goal.replace('_', ' ')}`,
        description: `Treino gerado por IA com base no objetivo de ${student.goal} e experi√™ncia ${experience}. ${exercises.length < 6 ? 'Usando exerc√≠cios b√°sicos dispon√≠veis.' : ''}`,
        category: category,
        difficulty: difficulty,
        exercises: exercises.map((ex, index) => ({
          exercise: ex,
          sets: sets,
          reps: parseInt(repRange.split('-')[1]) || 12, // Use the upper end of the range
          rest_time: 60,
          notes: `Exerc√≠cio ${index + 1} - Foque na forma correta.`
        }))
      };

      // 5. Navigate to workout creator with the suggestion
      navigate('/workouts', { 
        state: { 
          suggestedWorkout,
          fromSuggestion: true // Flag para indicar que veio da IA
        } 
      });

      toast({
        title: "Sugest√£o Gerada!",
        description: `Treino criado com ${exercises.length} exerc√≠cios. Edite no criador!`,
      });

    } catch (error: any) {
      console.error("Error generating workout:", error);
      toast({
        title: "Erro na Gera√ß√£o",
        description: "N√£o foi poss√≠vel gerar a sugest√£o. Tente novamente ou crie manualmente no menu Treinos.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Dialog open={true} onOpenChange={(open) => !open && onClose()}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Wand2 className="h-6 w-6 text-primary" />
            Sugest√£o de Treino com IA
          </DialogTitle>
          <DialogDescription>
            Avalia√ß√£o salva com sucesso! Deseja que nossa IA crie uma sugest√£o de treino para {student.name} com base nos novos dados?
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 text-sm text-muted-foreground">
          <p>A IA ir√° considerar:</p>
          <ul className="list-disc pl-5 mt-2 space-y-1">
            <li>O objetivo principal do aluno: <strong>{student.goal.replace('_', ' ')}</strong></li>
            <li>Os resultados da avalia√ß√£o rec√©m-realizada.</li>
            <li>O n√≠vel de experi√™ncia informado na anamnese.</li>
          </ul>
          <p className="mt-3">Voc√™ poder√° editar o treino completamente antes de salv√°-lo.</p>
        </div>
        <div className="flex justify-end gap-2">
          <Button variant="outline" onClick={onClose}>
            Agora n√£o
          </Button>
          <Button onClick={generateWorkout} disabled={isGenerating}>
            {isGenerating ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Wand2 className="mr-2 h-4 w-4" />
            )}
            Gerar Sugest√£o
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default WorkoutSuggestionDialog;